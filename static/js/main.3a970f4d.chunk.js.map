{"version":3,"sources":["components/Navigation/Navigation.jsx","components/Logo/Logo.jsx","components/ImageLinkForm/ImageLinkForm.jsx","components/ImageRecognition/ImageRecognition.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","className","Logo","ImageLinkForm","_ref","inputHandler","submitHandler","htmlFor","id","type","placeholder","onChange","onClick","ImageRecognition","imageUrl","box","src","alt","style","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","app","Clarifai","App","apiKey","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calculateLocation","data","area","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","left_col","top_row","right_col","bottom_row","displayBox","setState","e","target","value","preventDefault","models","predict","FACE_DETECT_MODEL","state","then","response","catch","err","console","log","_this$state","components_Logo_Logo","components_Navigation_Navigation","components_ImageLinkForm_ImageLinkForm","components_ImageRecognition_ImageRecognition","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a970f4d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Navigation.css\";\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <nav className=\" w-25 mr2\">\r\n      <p className=\"f3 tr link dim underline pointer\">Wyloguj</p>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\r\n\r\nconst Logo = () => {\r\n  return <div className=\"f3 w-25 pa3 mr2\">FaceDetector</div>;\r\n};\r\n\r\nexport default Logo;\r\n","import React from \"react\";\r\n\r\nconst ImageLinkForm = ({ inputHandler, submitHandler }) => {\r\n  return (\r\n    <div>\r\n      <form className=\"bg-light-red mw7 center pa4 br2-ns ba b--black-10\">\r\n        <label htmlFor=\"input_url\" />\r\n        <input\r\n          id=\"input_url\"\r\n          className=\"f4 pa2 w-70 center\"\r\n          type=\"text\"\r\n          placeholder=\"Wklej link\"\r\n          onChange={inputHandler}\r\n        />\r\n        <button\r\n          className=\"w-30 grow f4 link ph3 pv2 dib white bg-light-purple\"\r\n          onClick={submitHandler}\r\n        >\r\n          Szukaj\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageLinkForm;\r\n","import React from \"react\";\r\nimport \"./ImageRecognition.css\";\r\n\r\nconst ImageRecognition = ({ imageUrl, box }) => {\r\n  return (\r\n    <div className=\"img__container\">\r\n      <img id=\"inputimage\" src={imageUrl} alt=\"\" />\r\n      <div\r\n        className=\"boundingBox\"\r\n        style={{\r\n          top: box.topRow,\r\n          right: box.rightCol,\r\n          bottom: box.bottomRow,\r\n          left: box.leftCol\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageRecognition;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Clarifai from \"clarifai\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport ImageRecognition from \"./components/ImageRecognition/ImageRecognition\";\n\nconst app = new Clarifai.App({\n  apiKey: \"8c943830b8a646e987025e3b8df27584\"\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      imageUrl: \"\",\n      box: {}\n    };\n  }\n\n  calculateLocation = data => {\n    const area = data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById(\"inputimage\");\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: area.left_col * width,\n      topRow: area.top_row * height,\n      rightCol: width - area.right_col * width,\n      bottomRow: height - area.bottom_row * height\n    };\n  };\n\n  displayBox = box => {\n    this.setState({ box: box });\n  };\n\n  inputHandler = e => {\n    this.setState({\n      imageUrl: e.target.value\n    });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.imageUrl)\n      .then(response => this.displayBox(this.calculateLocation(response)))\n      .catch(err => console.log(\"err\", err));\n  };\n\n  render() {\n    const { imageUrl, box } = this.state;\n    return (\n      <div className=\"container\">\n        <div className=\"flex items-center justify-between mv5\">\n          <Logo />\n          <Navigation />\n        </div>\n        <ImageLinkForm\n          inputHandler={this.inputHandler}\n          submitHandler={this.submitHandler}\n        />\n        <ImageRecognition imageUrl={imageUrl} box={box} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}